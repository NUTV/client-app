Handlebars = require 'handlebars'
component  = require 'application/components/loader'
moment     = require 'moment'

module.exports = ->

  helpers =

    css: (filename) ->
      new Handlebars.SafeString(process.env.BASE_URL + '/css/' + filename)

    mainTitle: (text, showTitle) ->
      text = helpers.episodeTitle(text, showTitle)
      new Handlebars.SafeString("<h1 class=\"main-title\">#{text}</h1>")

    secondaryTitle: (text) ->
      new Handlebars.SafeString("<h2 class=\"secondary-title\">#{text}</h2>")

    url: (controlleraction, id) ->
      url = [controlleraction]
      if typeof id isnt 'object' then url.push(id)
      return new Handlebars.SafeString(process.env.BASE_URL + '/' + url.join('/'))

    alternate: (num) ->
      if (num % 2 == 0) then 'even' else 'odd'

    logobox: component('logobox')

    episodeTitle: (text, showTitle) ->
      #strip off spaces and "nutv -" from the start
      text = text?.replace(/^.*[-:]\s?/i, '')
      if showTitle?
        regexStr = '(?:\s)*(?:-)*(?:\s)*' + showTitle + '(?:\s)*(?:-)*(?:\s)*'
        regex = new RegExp('(?:\s)*(?:-)*(?:\s)*' + showTitle + '(?:\s)*(?:-)*(?:\s)*', 'i')
        text = text?.replace(regex, '')

    episodeDescriptionSnippet: (text) ->

      # get the first paragraph up to a line break
      snippet = text?.match(/(.*)[\n\Z]/i)?[1]

      words = snippet?.split(' ').filter (item) -> return !!item

      # either return the words as a string or if necessary trim off some of
      # the words and append ... before returning the words as a string
      if words?.length > 15 then return words.splice(0, 15).join(' ') + ' ...'
      words?.join(' ')

    episodeDate: (dateText) ->
      moment(dateText).format('MMMM Do YYYY')

    showDescription: (text) ->
      if not text then text = 'Please fill in a description for this show on youtube'
      text

    showDescriptionShort: (text) ->
      if not text then text = 'Please fill in a description for this show on youtube'
      text

  return helpers
